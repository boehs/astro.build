---
import Page from '../layouts/Page.astro'
import PixelLink from '../components/PixelLink.astro'
import { Markdown } from 'astro/components'
let contributemd: Response | String = await fetch('https://raw.githubusercontent.com/withastro/astro/main/CONTRIBUTING.md')
contributemd = await contributemd.text()

//#region ghstats
function abbrNum(number, decPlaces) {
    decPlaces = Math.pow(10,decPlaces)
    var abbrev = [ "k", "m", "b", "t" ]
    for (var i=abbrev.length-1; i>=0; i--) {
        var size = Math.pow(10,(i+1)*3)
        if(size <= number) {
             number = Math.round(number*decPlaces/size)/decPlaces
             if((number == 1000) && (i < abbrev.length - 1)) {
                 number = 1
                 i++
             }
             number += abbrev[i]
             break
        }
    }
    return number
}

let astrorepo: Response | String | {Any} = await fetch('https://api.github.com/repos/withastro/astro')
astrorepo = await astrorepo.text()
astrorepo = JSON.parse(astrorepo)

const csvToJson = (string) => {
  const regex = new RegExp(`\\s*(")?(.*?)\\1\\s*(?:,|$)`, 'gs')
  const match = string => [...string.matchAll(regex)].map(match => match[2])
    .filter((_, i, a) => i < a.length - 1)
  const lines = string.split('\n')
  const heads = match(lines.splice(0, 1)[0])
  return lines.map(line => match(line).reduce((acc, cur, i) => ({
    ...acc,
    [heads[i] || `extra_${i}`]: (cur.length > 0) ? (Number(cur) || cur) : null
  }), {}))
}

let csv: Response | string | {Any} = await fetch('https://raw.githubusercontent.com/withastro/astro/main/scripts/stats/stats.csv')
csv = await csv.text()
csv = csvToJson(csv)

let stats = {
    "New Issues (24h)": csv[0]['Issues (24hr)'],
    "PRs (24h)": csv[0]['PRs (24hr)'],
    "Stars": String(abbrNum(astrorepo.stargazers_count,1))
}
//#endregion

//#region fetch docs
let docs: Response | string | [{}] = await fetch('https://api.github.com/repos/withastro/astro/issues?labels=docs')
docs = JSON.parse(await docs.text())
docs = docs.map(doc => {
    const title = doc.title.replace("ðŸ“˜ DOC: ",'')
                            .replace(':blue_book: DOC: ','')
    return {  ...doc, title: title}
})
---

<Page title="Contribute">
    <header>
        <h1 class="title text-gradient">Contribute</h1>
        <p></p>
    </header>
    <div class="items">
        <div class="post color">
            <div>
                <h2>Welcome!</h2>
                <p>Hey, thank you for your interest in contributing to astro,
                it's awesome that you even made it this far! We put together
                this page to get you going as fast as possible. It has some
                really useful information, and we hope it helps make your job
                just a bit easier!
                </p>
            </div>
        </div>
        <div class="post color interactive">
            <details >
                <summary><h2 style="display: inline;">First Rodeo?</h2>
                <p>Get started fast, read the contributer guide!</p>
                </summary>
                <Markdown>
                    {contributemd}
                </Markdown>
            </details>
        </div>
        <div class="secondary">
            <div>
                <h2>Some cool issues!</h2>
            </div>
            <div class="issue-nav stat">
                <PixelLink variant="outline" href="https://docs.astro.build">Good First Issues</PixelLink>
                <PixelLink variant="outline" href="https://docs.astro.build">Unimplemented RFCs</PixelLink>
                <PixelLink href="https://docs.astro.build">Docs</PixelLink>
            </div>
            <div class="issue-group" id="issue-doc">
                {Object.entries(docs).map(docissue =>
                    <div class="post color">
                        <h2>{docissue[1].title}</h2>
                        <p>
                            <Markdown>
                                {docissue[1].body.split('\n')[0]}
                            </Markdown>
                        </p>
                    </div>)}
            </div>
        </div>
        <div class="secondary">
            <h2>Thanks to you...</h2>
            <div class="stat spread">
                {Object.entries(stats).map(stat =>
                    <div class="post color">
                        <h2>{stat[0]}</h2>
                        <h1 class="title text-gradient">{stat[1]}</h1>
                    </div>)}
            </div>
        </div>
    </div>
</Page>

<style>
    h1,h2,h3,h4,h5,h6 {
        font-family: var(--font-display);
        margin: 0 auto;
        flex-grow: 1;
        width: 100%;
        color: var(--color-dusk);
    }
    .secondary {
        display: flex;
        flex-direction: column;
        gap: 4rem;
    }
    h1.title {
        --fill: var(--gradient-pop-1);
        font-size: var(--size-900);
    }
    .items {
        width: 100%;
        max-width: 64rem;
        padding: 2rem;
        padding-bottom: 4rem;
        display: flex;
        gap: 4rem;
        flex-flow: column nowrap;
        font-family: var(--font-body);
        font-size: var(--size-500);
        line-height: 1.3;
        color: var(--color-midnight);
    }
    .issue-group {
        margin-left: -2rem;
        margin-right: -2rem;
        display: grid;
        grid-template-columns: repeat(2,1fr);
        grid-gap: 2rem;
    }
    .stat {
        display: flex;
        gap: 2rem;
        margin-left: -2rem;
        margin-right: -2rem;
    }
    .stat.spread > * {
        flex-grow: 1;
        flex-basis: 0;
        white-space: nowrap;
    }
    .stat > .post,
    .items > .post,
    .issue-group > .post {
        padding: 3rem 2rem;
    }
    .items > .post {
        margin-left: -2rem;
        margin-right: -2rem;
        font-family: var(--font-body);
        font-size: var(--size-500);
        line-height: 1.3;
    }
    .post.color {
        background: white;
        box-shadow: var(--shadow-md);
        border-radius: var(--corner-md);
    }
    .post.interactive:hover {
        background: linear-gradient(to top, var(--color-dawn), white);
    }
    :is(.post.interactive:hover) .title {
        --fill: var(--gradient-pop-1);
    }
    .post :global(a) {
        z-index: 1;
    }
    header {
        padding: 3rem 2rem 2rem;
        width: 100%;
        max-width: 64rem;
        flex-grow: 1;
    }
    summary {
        width: 100%;
    }

    summary::marker {
        color: var(--color-dusk);
        font-size: var(--size-600);
        font-family: var(--font-display);
    }
    p {
        margin-top: 1em;
    }
</style>
